import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, filters
)
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env)
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU,
    CHOOSING_SERVICE,
    TYPING_CAR_MODEL,
    CHOOSING_SIGNAL_TYPE,
    CHOOSING_TINTING_TYPE,
    CHOOSING_CAMERA_NEED,
    CHOOSING_MILEAGE,
    CHOOSING_LAST_SERVICE,
    CHOOSING_LOCATION
) = range(9)

# –ö–ª—é—á–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ user_data
CAR_MODEL, SERVICE_TYPE, SERVICE_DETAIL, LOCATION = range(4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
flask_app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ Application –±–æ—Ç–∞
bot_application = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        ['üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞'],
        ['üöò –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏', 'ü™ü –¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ'],
        ['üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–≥–Ω–∏—Ç–æ–ª—ã', 'üîß –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û'],
        ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:',
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞"
async def show_addresses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    phone1 = '+7 (927) 267-90-70'
    phone2 = '+7 (937) 180-96-33'
    
    message = (
        "–†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å 9 –¥–æ 19\n\n"
        f"üìç—É–ª. –§–∞–¥–µ–µ–≤–∞, 51–ê\n"
        f"<a href='tel:{phone1}'>{phone1}</a>\n\n"
        f"üìç–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à., 16 –∫–º, 1–ê\n"
        f"<a href='tel:{phone2}'>{phone2}</a>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    await update.message.reply_text(
        message,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É!", callback_data='appointment_global')]
        ])
    )
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É!"
async def global_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º –≤–∞—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É!")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —É—Å–ª—É–≥–∏ –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å
    context.user_data[SERVICE_TYPE] = 'global'
    
    await query.message.reply_text(
        "–ö–∞–∫–æ–π —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å? (–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∏ –≥–æ–¥)",
        reply_markup=ReplyKeyboardMarkup([['‚óÄÔ∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
    )
    return TYPING_CAR_MODEL

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
async def choose_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    service = update.message.text
    service_map = {
        'üöò –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏': 'signal',
        'ü™ü –¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ': 'tinting',
        'üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–≥–Ω–∏—Ç–æ–ª—ã': 'android_auto',
        'üîß –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û': 'maintenance'
    }
    
    context.user_data[SERVICE_TYPE] = service_map.get(service, 'unknown')
    
    await update.message.reply_text(
        "–ö–∞–∫–æ–π —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å? (–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∏ –≥–æ–¥)",
        reply_markup=ReplyKeyboardMarkup([['‚óÄÔ∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
    )
    return TYPING_CAR_MODEL

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
async def receive_car_model(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data[CAR_MODEL] = update.message.text
    service_type = context.user_data.get(SERVICE_TYPE, 'global')
    
    if service_type == 'signal':
        keyboard = [['–°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º', '–°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CHOOSING_SIGNAL_TYPE
        
    elif service_type == 'tinting':
        keyboard = [['–ó–∞–¥–Ω–∏–π –æ—Ç—Å–µ–∫', '–ü–µ—Ä–µ–¥–Ω–∏–µ –±–æ–∫–æ–≤—ã–µ', '–õ–æ–±–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            "–ß—Ç–æ —Ç–æ–Ω–∏—Ä—É–µ–º?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CHOOSING_TINTING_TYPE
        
    elif service_type == 'android_auto':
        keyboard = [['–î–∞', '–ù–µ—Ç'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥']]
        await update.message.reply_text(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã –∑–∞–¥–Ω–µ–≥–æ –≤–∏–¥–∞?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CHOOSING_CAMERA_NEED
        
    elif service_type == 'maintenance':
        keyboard = [
            ['–î–æ 15 000 –∫–º', '15 000 - 30 000 –∫–º'],
            ['30 000 - 60 000 –∫–º', '60 000 - 100 000 –∫–º'],
            ['–°–≤—ã—à–µ 100 000 –∫–º'],
            ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
        ]
        await update.message.reply_text(
            "–ö–∞–∫–æ–π —É –≤–∞—Å –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CHOOSING_MILEAGE
        
    else:  # global appointment
        keyboard = [
            ['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏', '–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ'],
            ['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–≥–Ω–∏—Ç–æ–ª—ã', '–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û'],
            ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CHOOSING_SERVICE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—Å–ª—É–≥
async def receive_signal_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data[SERVICE_DETAIL] = update.message.text
    return await ask_for_location(update, context)

async def receive_tinting_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data[SERVICE_DETAIL] = update.message.text
    return await ask_for_location(update, context)

async def receive_camera_need(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data[SERVICE_DETAIL] = update.message.text
    return await ask_for_location(update, context)

async def receive_mileage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data[SERVICE_DETAIL] = update.message.text
    keyboard = [
        ['–ú–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥', '6-12 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥'],
        ['–ë–æ–ª–µ–µ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥', '–ù–µ –ø–æ–º–Ω—é'],
        ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
    ]
    await update.message.reply_text(
        "–ö–æ–≥–¥–∞ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CHOOSING_LAST_SERVICE

async def receive_last_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['last_service'] = update.message.text
    return await ask_for_location(update, context)

# –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
async def ask_for_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [['üìç—É–ª. –§–∞–¥–µ–µ–≤–∞, 51–ê', 'üìç–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à., 16 –∫–º, 1–ê'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥']]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –∞–¥—Ä–µ—Å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CHOOSING_LOCATION

# –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ - –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
async def receive_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data[LOCATION] = update.message.text
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    service_names = {
        'signal': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
        'tinting': '–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ',
        'android_auto': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Android –º–∞–≥–Ω–∏—Ç–æ–ª—ã',
        'maintenance': '–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û –∏ –†–µ–º–æ–Ω—Ç',
        'global': '–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É'
    }
    
    service_type = context.user_data.get(SERVICE_TYPE, 'global')
    message = f"‚úÖ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
    message += f"–£—Å–ª—É–≥–∞: {service_names.get(service_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞')}\n"
    message += f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {context.user_data.get(CAR_MODEL, '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    if SERVICE_DETAIL in context.user_data:
        message += f"–î–µ—Ç–∞–ª–∏: {context.user_data[SERVICE_DETAIL]}\n"
    
    if 'last_service' in context.user_data:
        message += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û: {context.user_data['last_service']}\n"
    
    message += f"–ê–¥—Ä–µ—Å: {context.user_data.get(LOCATION, '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    message += f"–ö–ª–∏–µ–Ω—Ç: @{update.effective_user.username or '–ù–µ—Ç username'}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_CHAT_ID:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=message,
            parse_mode='HTML'
        )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=main_menu_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return MAIN_MENU

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=main_menu_keyboard()
    )
    context.user_data.clear()
    return MAIN_MENU

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(application):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex('^üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞$'), show_addresses),
                MessageHandler(filters.Regex('^(üöò –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏|ü™ü –¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ|üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–≥–Ω–∏—Ç–æ–ª—ã|üîß –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û)$'), choose_service),
                MessageHandler(filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'), back_to_menu),
            ],
            TYPING_CAR_MODEL: [
                MessageHandler(filters.TEXT & ~filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'), receive_car_model),
                MessageHandler(filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'), back_to_menu),
            ],
            CHOOSING_SERVICE: [
                MessageHandler(filters.Regex('^(–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏|–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ|–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–≥–Ω–∏—Ç–æ–ª—ã|–ü–ª–∞–Ω–æ–≤–æ–µ –¢–û)$'), choose_service),
                MessageHandler(filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'), back_to_menu),
            ],
            CHOOSING_SIGNAL_TYPE: [
                MessageHandler(filters.Regex('^(–°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º|–°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞)$'), receive_signal_type),
                MessageHandler(filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'), back_to_menu),
            ],
            CHOOSING_TINTING_TYPE: [
                MessageHandler(filters.Regex('^(–ó–∞–¥–Ω–∏–π –æ—Ç—Å–µ–∫|–ü–µ—Ä–µ–¥–Ω–∏–µ –±–æ–∫–æ–≤—ã–µ|–õ–æ–±–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ)$'), receive_tinting_type),
                MessageHandler(filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'), back_to_menu),
            ],
            CHOOSING_CAMERA_NEED: [
                MessageHandler(filters.Regex('^(–î–∞|–ù–µ—Ç)$'), receive_camera_need),
                MessageHandler(filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'), back_to_menu),
            ],
            CHOOSING_MILEAGE: [
                MessageHandler(filters.Regex('^(–î–æ 15 000 –∫–º|15 000 - 30 000 –∫–º|30 000 - 60 000 –∫–º|60 000 - 100 000 –∫–º|–°–≤—ã—à–µ 100 000 –∫–º)$'), receive_mileage),
                MessageHandler(filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'), back_to_menu),
            ],
            CHOOSING_LAST_SERVICE: [
                MessageHandler(filters.Regex('^(–ú–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥|6-12 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥|–ë–æ–ª–µ–µ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥|–ù–µ –ø–æ–º–Ω—é)$'), receive_last_service),
                MessageHandler(filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'), back_to_menu),
            ],
            CHOOSING_LOCATION: [
                MessageHandler(filters.Regex('^(üìç—É–ª. –§–∞–¥–µ–µ–≤–∞, 51–ê|üìç–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à., 16 –∫–º, 1–ê)$'), receive_location),
                MessageHandler(filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'), back_to_menu),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'), back_to_menu)],
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(global_appointment, pattern='^appointment_global$'))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def run_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    setup_handlers(application)
    
    global bot_application
    bot_application = application
    
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

# Flask endpoint –¥–ª—è –≤–µ–±—Ö—É–∫–∞
@flask_app.route('/webhook', methods=['POST'])
async def webhook():
    if bot_application is None:
        return 'Bot not initialized', 500
    
    update = Update.de_json(request.get_json(), bot_application.bot)
    await bot_application.process_update(update)
    return 'OK'

# –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    import asyncio
    from threading import Thread
    
    def run_flask():
        flask_app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(run_bot())
